plugins {
    id 'java'
    id 'jacoco'
    id 'pmd'
    id 'checkstyle'
}

group 'org.example.multipod'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    implementation 'net.sourceforge.argparse4j:argparse4j:0.9.0'

    implementation 'com.kohlschutter.junixsocket:junixsocket-core:2.5.1'
    implementation 'com.squareup.okhttp3:okhttp:3.14.0'

    //implementation 'com.kohlschutter.junixsocket:junixsocket-jetty:2.5.1'

    //implementation("com.squareup.okhttp3:okhttp:4.10.0")
    //implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.10.0'
}

test {
    useJUnitPlatform()
}

checkstyle {
    toolVersion = '10.3.1'
}


jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}

pmd {
    consoleOutput = true
    toolVersion = "6.21.0"
    rulesMinimumPriority = 5
    ruleSets = ["category/java/errorprone.xml", "category/java/bestpractices.xml"]
}


/*
 * DISPLAY TEST RESULTS IN CONSOLE
 */

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}